// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: ffmpeg.proto

package ffmpeg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobManager_Process_FullMethodName = "/ffmpeg.JobManager/Process"
)

// JobManagerClient is the client API for JobManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagerClient interface {
	// Streamed SendJob rpc call that returns a stream of File messages.
	Process(ctx context.Context, opts ...grpc.CallOption) (JobManager_ProcessClient, error)
}

type jobManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagerClient(cc grpc.ClientConnInterface) JobManagerClient {
	return &jobManagerClient{cc}
}

func (c *jobManagerClient) Process(ctx context.Context, opts ...grpc.CallOption) (JobManager_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobManager_ServiceDesc.Streams[0], JobManager_Process_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagerProcessClient{stream}
	return x, nil
}

type JobManager_ProcessClient interface {
	Send(*ProcessRequest) error
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type jobManagerProcessClient struct {
	grpc.ClientStream
}

func (x *jobManagerProcessClient) Send(m *ProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobManagerProcessClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobManagerServer is the server API for JobManager service.
// All implementations must embed UnimplementedJobManagerServer
// for forward compatibility
type JobManagerServer interface {
	// Streamed SendJob rpc call that returns a stream of File messages.
	Process(JobManager_ProcessServer) error
	mustEmbedUnimplementedJobManagerServer()
}

// UnimplementedJobManagerServer must be embedded to have forward compatible implementations.
type UnimplementedJobManagerServer struct {
}

func (UnimplementedJobManagerServer) Process(JobManager_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedJobManagerServer) mustEmbedUnimplementedJobManagerServer() {}

// UnsafeJobManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagerServer will
// result in compilation errors.
type UnsafeJobManagerServer interface {
	mustEmbedUnimplementedJobManagerServer()
}

func RegisterJobManagerServer(s grpc.ServiceRegistrar, srv JobManagerServer) {
	s.RegisterService(&JobManager_ServiceDesc, srv)
}

func _JobManager_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobManagerServer).Process(&jobManagerProcessServer{stream})
}

type JobManager_ProcessServer interface {
	Send(*ProcessResponse) error
	Recv() (*ProcessRequest, error)
	grpc.ServerStream
}

type jobManagerProcessServer struct {
	grpc.ServerStream
}

func (x *jobManagerProcessServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobManagerProcessServer) Recv() (*ProcessRequest, error) {
	m := new(ProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobManager_ServiceDesc is the grpc.ServiceDesc for JobManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ffmpeg.JobManager",
	HandlerType: (*JobManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _JobManager_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ffmpeg.proto",
}
